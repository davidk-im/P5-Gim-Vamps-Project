form 1 = sign up

form 2 = user input for game

form 3 = log in

form 4 = elo demo results

Unicode for chess pieces on table:
1. White Chess King
Unicode : U+2654

2. Black Chess King
Unicode : U+265A

3. White Chess Queen
Unicode : U+2655

4. Black Chess Queen
Unicode : U+265B

5. White Chess Rook
Unicode : U+2656

6. Black Chess Rook
Unicode : U+265C

7. White Chess Bishop
Unicode : U+2657

8. Black Chess Bishop
Unicode : U+265D

9. White Chess Knight
Unicode : U+2658

10. Black Chess Knight
Unicode : U+265E

11. White Chess Pawn
Unicode : U+2659

12. Black Chess Pawn
Unicode : U+265F

##login trial
class User:
    def __init__(self, id, username, password):
        self.id = id
        self.username = username
        self.password = password

    def __repr__(self):
        return f'<User: {self.username}>'

users = []
users.append(User(id=1, username='avabrooks', password='password'))
users.append(User(id=2, username='lucasbruner', password='secret'))
users.append(User(id=3, username='davidkim', password='okay'))
users.append(User(id=4, username='kylemyint', password='chess'))


app = Flask(__name__)
app.secret_key = '12secure34'

@app.before_request
def before_request():
    g.user = None

    if 'user_id' in session:
        user = [x for x in users if x.id == session['user_id']][0]
        g.user = user


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        session.pop('user_id', None)

        username = request.form['username']
        password = request.form['password']

        user = [x for x in users if x.username == username][0]
        if user and user.password == password:
            session['user_id'] = user.id
            return redirect(url_for('profile'))

        return redirect(url_for('login'))

    return render_template('login.html')


@app.route('/profile')
def profile():
    if not g.user:
        return redirect(url_for('login'))

    return render_template('profile.html')

########################################################################################################################
LOGIN TRIAL #2
class User(db.Model):
    username = db.Column(db.String(255), primary_key=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    tactics_elo = db.Column(db.Integer, nullable=False)
    tactics_streak = db.Column(db.Integer, nullable=False)
    multiplayer_elo = db.Column(db.Integer, nullable=False)

#login trial pt.2
class LoginForm(FlaskForm):
    username = StringField('username', validators=[InputRequired(), Length(min=4, max=15)])
    password = PasswordField('password', validators=[InputRequired(), Length(min=8, max=80)])
    remember = BooleanField('remember me')


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/login', methods=['GET', 'POST'])
def login():
    form=LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user:
            if check_password_hash(user.password, form.password.data):
                login_user(user, remember=form.remember.data)
                return redirect(url_for('home.html'))

        return '<h1>Invalid username or password</h1>'
        #return '<h1>' + form.username.data + ' ' + form.password.data + '</h1>'

    return render_template('login.html', form=form)

@app.route('/profile')
@login_required
def dashboard():
    return render_template('profile.html', name=current_user.username)

########################################################################################################################



from flask_login import current_user, login_user, logout_user
from flaskmain import , login_manager  # login_manager declared in models.init.py



# Authorise User
# user_dict requires user_name, email, password
def model_authorize(user_dict):
    # check to see if the user is already registered
    existing_user = AuthUser.query.filter_by(email=user_dict['email']).first()
    # if not, register them
    if existing_user is None:
        auth_user = AuthUser(
            name=user_dict['user_name'],
            email=user_dict['email']
        )
        # encrypt their password and add it to the authuser object
        auth_user.set_password(user_dict['password'])
        db.session.add(auth_user)
        db.session.commit()  # Create new user


# if login url, show phones table only
def model_login(user_dict):
    # Bypass if user is logged in
    if current_user.is_authenticated:
        return True
    # if not already logged in, show the login form
    print(user_dict['email'])
    user_record = AuthUser.query.filter_by(email=user_dict['email']).first()
    if user_record and AuthUser.check_password(user_record, user_dict['password']):
        login_user(user_record)
        return True
    # login failed
    return False


# logout user
def model_logout():
    logout_user()


# this function is needed for Flask-Login to work.
@login_manager.user_loader
def model_user_loader(user_id):
    """Check if user is logged-in on every page load."""
    if user_id is not None:
        return AuthUser.query.get(user_id)
    return None



